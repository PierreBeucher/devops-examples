version: "3.7"

# 
# This Docker Compose file provides a production-like infrastructure
# with MySQL, Hashicorp Vault and AWS (LocalStack)
# to demonstrate secret loading and AWS credentials generation.
#
services:

  # Hashicorp Vault instance with our secrets
  # Files are persisted under ./hashicorp-vault/dev-data
  vault:
    image: docker.io/hashicorp/vault:1.14.1
    ports:
    - "127.0.0.1:8200:8200"
    cap_add: [IPC_LOCK] 
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: rootToken
    healthcheck:
      test: ["CMD", "apk", "add", "curl", "&&", "curl", "-f", "http://localhost:8200/.health"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 3s

  # MySQL database used by app
  mysql:
    image: docker.io/library/mysql:8.1.0
    environment:
      MYSQL_ROOT_PASSWORD: 'p@ssword!'
    volumes:
      - mysql-data:/var/lib/mysql 
    ports:
      - 3306:3306

  # LocalStack is an AWS emulator
  localstack:
    image: docker.io/localstack/localstack:latest
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - localstack-data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock    

  # Run afer Vault startup to initialize secrets
  vault-secret-setup:
    image: docker.io/hashicorp/vault:1.14.1
    network_mode: host
    environment:
      VAULT_TOKEN: rootToken
      VAULT_ADDR: http://localhost:8200 
    entrypoint: |-
      vault kv put -format=json --mount=secret app/dev mysql_password='p@ssword!' npm_token="dummyToken"
    depends_on:
      vault:
        condition: service_healthy

volumes:
  localstack-data:
  mysql-data: 